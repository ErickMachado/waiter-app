openapi: '3.0.0'

info:
  description: 'A food order API for the waiterAPP project'
  title: 'WaiterAPP API'
  version: '0.0.1'

servers:
  - url: 'http://localhost:3333'

tags:
  - name: 'Category'
  - name: 'Product'
  - name: 'Order'

paths:
  /categories:
    get:
      description: 'Return all categories registered'
      summary: 'Return a list of categories'
      responses:
        '200':
          description: 'A list of categories'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags: ['Category']
    post:
      description: 'Create a new category and return it'
      summary: 'Create a new category'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                icon:
                  type: 'string'
                  example: üçî
                name:
                  type: 'string'
                  example: 'Lanches'
      responses:
        '200':
          description: 'The category was successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags: ['Category']
  /products:
    get:
      description: 'Return all products'
      summary: 'Return all products'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags: ['Product']
    post:
      description: 'Create a new product'
      summary: 'Create a new product'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: 'object'
              properties:
                categoryId:
                  type: 'string'
                  example: 'clapcnt900000bjuobxdafuyz'
                name:
                  type: 'string'
                  example: 'Pizza Quatro Queijos'
                description:
                  type: 'string'
                  example: 'Pizza de Quatro Queijos com borda tradicional'
                image:
                  description: 'The file to be uploaded'
                  type: 'string'
                  format: 'binary'
                price:
                  type: 'number'
                  example: 40
                ingredients:
                  description: 'An optional list of ingredients'
                  type: 'array'
                  items:
                    type: 'object'
                    properties:
                      icon:
                        type: 'string'
                        example: 'üßÄ'
                      name:
                        type: 'string'
                        example: 'Mussarela'
      responses:
        '200':
          description: 'Product was successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags: ['Product']
  /orders:
    get:
      description: 'Get all orders'
      responses:
        '200':
          description: 'List of orders'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Order'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: 'Get all orders'
      tags: ['Order']
    post:
      description: 'This route is responsible to register a new order.'
      summary: 'Create a new order'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                table:
                  description: 'The restaurant table identification'
                  type: 'string'
                  example: '1'
                items:
                  type: 'array'
                  items:
                    type: 'object'
                    properties:
                      productId:
                        type: 'string'
                        example: 'clamk5l4r00002v6lgtcs6wji'
                      quantity:
                        type: 'number'
                        example: 1
      responses:
        '200':
          description: 'The order was successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags: ['Order']
  /orders/{orderId}:
    patch:
      description: 'This route is responsible for updating orders. More precisely, the order status.'
      summary: 'Change order status'
      parameters:
        - in: 'path'
          name: 'orderId'
          description: 'The ID of the order to be updated'
          example: 'clamk5l4r00002v6lgtcs6wji'
          schema:
            type: 'string'
          required: true
      requestBody:
        description: 'The payload must have the status property. It will replace the current status in the order. The status must be one of following: Waiting, InProduction and Done.'
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                status:
                  type: 'string'
                  example: 'InProduction'
      responses:
        '200':
          description: 'The order was successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags: ['Order']
components:
  responses:
    BadRequest:
      description: 'The request body is invalid'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              error:
                example: 'Required payload param is missing'
                type: 'string'
              statusCode:
                type: 'number'
                example: 400
    InternalServerError:
      description: 'An unknown error occurs during the request processing'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              statusCode:
                type: 'number'
                example: 500
    NotFound:
      description: 'The requested resource does not exists'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              error:
                example: 'Resource does not exists'
                type: 'string'
              statusCode:
                type: 'number'
                example: 409
    UnprocessableEntity:
      description: 'The request body is correct but some value of it is not accepted'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              error:
                example: 'The payload is correct but some value is invalid'
                type: 'string'
              statusCode:
                type: 'number'
                example: 422
  schemas:
    Category:
      type: 'object'
      properties:
        icon:
          type: 'string'
          example: 'üçï'
        id:
          type: 'string'
          example: 'clamk5l4r00002v6lgtcs6wji'
        name:
          type: 'string'
          example: 'Pizzas'
    Order:
      type: 'object'
      properties:
        id:
          example: 'clamk5l4r00002v6lgtcs6wji'
          type: 'string'
        table:
          example: '123'
          type: 'string'
        items:
          type: 'array'
          items:
            type: 'object'
            properties:
              product:
                $ref: '#/components/schemas/Product'
              quantity:
                type: 'number'
                example: 1
              createdAt:
                format: 'date-time'
                type: 'string'
              status:
                type: 'string'
                example: 'Waiting'
    Product:
      type: 'object'
      properties:
        categoryId:
          type: 'string'
          example: 'clapcnt900000bjuobxdafuyz'
        description:
          type: 'string'
          example: 'Pizza de Quatro Queijos com borda tradicional'
        id:
          type: 'string'
          example: 'clamk5l4r00002v6lgtcs6wji'
        imageName:
          type: 'string'
          example: '1668953640374-quatro-queijos.jpg'
        ingredients:
          type: 'array'
          items:
            type: 'object'
            properties:
              icon:
                type: 'string'
                example: 'üßÄ'
              name:
                type: 'string'
                example: 'Mussarela'
        name:
          type: 'string'
          example: 'Pizza Quatro Queijos'
        price:
          type: 'number'
          example: 40
